Index: stix_shifter_modules/proofpoint/stix_transmission/results_connector.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import json\n\nfrom stix_shifter_utils.modules.base.stix_transmission.base_results_connector import BaseResultsConnector\nfrom stix_shifter_utils.utils.error_response import ErrorResponder\nfrom stix_shifter_utils.utils import logger\n\nclass ResultsConnector(BaseResultsConnector):\n    def __init__(self, api_client):\n        self.api_client = api_client\n        self.logger = logger.set_logger(__name__)\n\n\n    def create_results_connection(self, search_id, offset, length):\n        try:\n            min_range = int(offset)\n            max_range = min_range + int(length)\n\n            # Grab the response, extract the response code, and convert it to readable json\n            response = self.api_client.get_search_results(search_id)\n            response_code = response.code\n            response_txt = response.read()\n            # Construct a response object\n            # print(\"response code={}, text={}\".format(response_code, response_txt))\n            return_obj = dict()\n            error_obj = dict()\n            if response_code == 200:\n                return_obj['success'] = True\n                try:\n                    response_txt = response.read().decode('utf-8')\n                    data= json.loads(response_txt)\n                    newdata = list()\n                    for key, value in data.items():\n                        if isinstance(value, list) and value:\n                            newdata+=value\n\n                    # slice off the data count according to offset values\n                    if newdata and min_range > 0 and max_range > 0 and len(newdata) > max_range:\n                        newdata = newdata[min_range:max_range]\n\n                    for msg in newdata:\n                        if \"messageParts\" in msg:\n                            msg[\"is_multipart\"] = True\n                        else: msg[\"is_multipart\"] = False\n\n                    print(\"newdata :\", newdata)\n                    return_obj['data'] = newdata\n\n                except json.decoder.JSONDecodeError as err:\n                    return_obj['success'] = False\n                except Exception as err:\n                    return_obj['success'] = False\n                    self.logger.error('Response decode error: {}'.format(err))\n\n            elif response_code > 200 and response_code <= 204:#empty results\n                error_obj['code'] = 2000\n            elif response_code == 400:#error from data source\n                error_obj['code'] = 4000\n            elif response_code == 401:#Authentication error\n                error_obj['code'] = 4010\n            elif response_code >= 402 and response_code <= 499:#All other client side errors\n                error_obj['code'] = 4020\n            else:\n                #unknown errors\n                error_obj['code'] = 7000\n            if error_obj:\n                error_msg = \"\"\n                try:\n                    error_msg = str(response_txt.decode(\"utf-8\"))\n                except Exception as err:\n                    self.logger.error('Response decode error: {}'.format(err))\n                error_obj['message'] = error_msg\n                ErrorResponder.fill_error(return_obj,\n                                          error_obj,\n                                          ['message'])\n                err = 'error when getting search results: {}:{}'.format(str(response_code), error_msg)\n                self.logger.error(err)\n                # raise NoResultsFoundError(err)\n            return return_obj\n        except Exception as err:\n            self.logger.error('error when getting search results: {}'.format(err))\n            raise\n\nclass NoResultsFoundError(Exception):\n    pass\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/stix_shifter_modules/proofpoint/stix_transmission/results_connector.py b/stix_shifter_modules/proofpoint/stix_transmission/results_connector.py
--- a/stix_shifter_modules/proofpoint/stix_transmission/results_connector.py	(revision ca9282c041bd9ba8581136708abe77290802c1d9)
+++ b/stix_shifter_modules/proofpoint/stix_transmission/results_connector.py	(date 1637338725740)
@@ -34,7 +34,7 @@
                             newdata+=value
 
                     # slice off the data count according to offset values
-                    if newdata and min_range > 0 and max_range > 0 and len(newdata) > max_range:
+                    if newdata and max_range > 0 and len(newdata) > max_range:
                         newdata = newdata[min_range:max_range]
 
                     for msg in newdata:
